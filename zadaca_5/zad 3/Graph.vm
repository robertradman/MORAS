function Graph.f 0
push argument 0
push constant 2
call Math.divide 2
return
function Graph.draw 6
push constant 0
push constant 128
push constant 255
push constant 128
call Screen.drawLine 4
pop temp 0
push constant 128
push constant 0
push constant 128
push constant 255
call Screen.drawLine 4
pop temp 0
push constant 32
neg
pop local 0
label WHILE_EXP0
push local 0
push constant 32
lt
not
if-goto WHILE_END0
push local 0
pop local 2
push local 2
call Graph.f 1
pop local 3
push local 0
push constant 1
add
pop local 4
push local 4
call Graph.f 1
pop local 5
push local 3
push constant 33
neg
gt
push local 3
push constant 33
lt
and
push local 5
push constant 33
neg
gt
and
push local 5
push constant 33
lt
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
push constant 128
add
push constant 128
push local 3
sub
push local 4
push constant 128
add
push constant 128
push local 5
sub
call Screen.drawLine 4
pop temp 0
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
