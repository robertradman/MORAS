class Vint{
	field Array v;
	field int capacity;
 
 
	method int len(){
		var int ret;
		let ret = capacity;
		return ret;
	}
	
	
	constructor Vint new(int n){
		if(n<0){
			let capacity = 1;
		}
		else{
			let capacity = Vint.pow(2,n);
		}
		let v = Array.new(capacity);
		return this;
	}



	method void set(int k, int val){
		var Array novi;
		var int i;
		while((k>capacity) | (k=capacity)){
			let novi = Array.new(capacity*2);
			let i = 0;
			while(i<capacity){
				let novi[i] = v[i];
				let i = i+1;
			}
			do v.dispose();
			let v = Array.new(capacity*2);
			let i = 0;
			let capacity = capacity*2;
			while(i<capacity){
				let v[i] = novi[i];
				let i = i+1;
			}
			do novi.dispose();
		}
		let v[k] = val;
		return;
	}

	method int get(int k){
		return v[k];
	}


	method void resize(int m){
		var Array novi;
		var int temp, new_cap, i, min_cap_new;
		if(m < 1){
			let temp = v[0];
			do v.dispose();
			let v = Array.new(1);
			let v[0] = temp;
			let capacity = 1;
			return;
		}

		let new_cap = Vint.pow(2,m);

		if(new_cap = capacity){return;} 

		let novi = Array.new(new_cap);
		let i = 0;
		let min_cap_new = Vint.min(new_cap, capacity);
		while(i<min_cap_new){
			let novi[i] = v[i];
			let i = i+1;
		}
	 
		do v.dispose();
		let v = Array.new(new_cap);
		let i = 0;
		while(i<new_cap){
			let v[i] = novi[i];
			let i = i+1;
		}
		do novi.dispose();
		let capacity = new_cap;
		return;
	}

	method void print(){
		var int i, size;
		let i = 0;
		while(i<capacity){
			do Output.printInt(v[i]);
			do Output.printChar(" ");
			let i = i+1;
		}
		return;
	}

	method void Dispose(){
		do Memory.deAlloc(this);
		return;
	}


	function bool is_eq(Vint v1, Vint v2){
		var int i, size_v1, size_v2;
		let size_v1 = v1.len();
		let size_v2 = v2.len();
		if(~(size_v1 = size_v2)){ return false;}

		let i = 0;
  
		while(i<size_v1){
			if(~(v1.get(i) = v2.get(i))) {return false;}
			let i = i+1;
		}
		return true;
	}


	method void swap(int a, int b){
		var int temp;
		let temp = v[a];
		let v[a] = v[b];
		let v[b] = temp;
		return;
	}

	function bool elems(Vint v1, Vint v2){
		var int i, j, size_v1, size_v2;
		let i = 0;
		let j = 0;
		let size_v1 = v1.len();
		let size_v2 = v2.len();
  
		if(~(size_v1 = size_v2)){return false;}
  
		while(i<size_v1){
			let j = i+1;
			while(j<size_v1){
				if(v1.get(i) > v1.get(j)){
					do v1.swap(i,j);
				}
				let j = j+1;
			}
			let i = i+1;
		}

		let i = 0;
		let j = 0;

		while(i<size_v2){
			let j = i+1;
			while(j<size_v2){
				if(v2.get(i) > v2.get(j)){
					do v2.swap(i,j);
				}
				let j = j+1;
			}
			let i = i+1;
		}

		let i = 0;
		while(i<size_v1){
			if(~(v1.get(i) = v2.get(i))){return false;}
			let i = i+1;
		}
		return true;
	}



 
	function int pow(int a, int b){
		var int count, res;
		let count = 0;
		let res = 1;
		while(count < b){
			let res = res*a;
			let count = count+1;
		}
		return res;
	}

	function int min(int a, int b){
		if(a<b) {return a;}
		else {return b;}
	}
}